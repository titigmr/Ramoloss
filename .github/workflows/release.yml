name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      type_version:
          description: 'Type version [ major | feature | bug ]'
          required: true
          default: 'feature'


jobs:
  build:
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - ARCH: armv7l
            registry: ghcr.io
            username: NAME_OWNER
            password: GITHUB_TOKEN
          - ARCH: x86_64
            registry: docker.io
            username: DOCKERHUB_USERNAME
            password: DOCKERHUB_TOKEN
    name: build ${{ matrix.ARCH }}

    steps:
      - name: Prepare before build
        run: |
          sudo apt-get update -y

      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to ${{ matrix.registry }}
        uses: docker/login-action@v1
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Build and test on ${{ matrix.ARCH }} plateform
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_DEV_TOKEN }}
        run: |
          make VERSION=latest build

      - name: push latest version on release
        env:
          ARCH: ${{ matrix.ARCH }}
          REGISTRY: ${{ matrix.registry }}
          REGISTRY_USERNAME: ${{ secrets[matrix.username] }}
        run: |
          make VERSION=latest push

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: get version
        run: |
          export VERSION=$(git describe --abbrev=0)
          echo ${VERSION}

      - name: increment version
        id: version
        uses: christian-draeger/increment-semantic-version@1.0.2
        with:
          current-version: ${VERSION}
          version-fragment: ${{ github.event.inputs.type_version }}

      - name: new version tag
        run: |
          git tag ${{ steps.version.outputs.next-version }}
          git push origin --tags
